from django.db import models
class AccountsAccounttype(models.Model):
    code = models.CharField(unique=True, max_length=50)
    name = models.CharField(max_length=100)
    color_code = models.CharField(max_length=7)
    description = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField()
    is_active = models.BooleanField()
class AccountsBalancehistory(models.Model):
    description = models.CharField(max_length=255)
    created_at = models.DateTimeField()
    created_by = models.ForeignKey('AccountsCustomuser', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey('AccountsCustomuser', models.DO_NOTHING, related_name='accountsbalancehistory_user_set')
class AccountsCardtransaction(models.Model):
    request_id = models.CharField(unique=True, max_length=50)
    telco = models.CharField(max_length=20)
    serial = models.CharField(max_length=50)
    pin = models.CharField(max_length=50)
    amount = models.IntegerField()
    real_amount = models.IntegerField(blank=True, null=True)
    status = models.CharField(max_length=20)
    message = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    user = models.ForeignKey('AccountsCustomuser', models.DO_NOTHING)
class AccountsCustomuser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    user_type = models.CharField(max_length=20)
    avatar = models.CharField(max_length=100, blank=True, null=True)
    address = models.TextField()
    birth_date = models.DateField(blank=True, null=True)
    gender = models.CharField(max_length=10)
    join_date = models.DateField()
    status = models.CharField(max_length=20)
    suspension_reason = models.TextField(blank=True, null=True)
    verification_token = models.CharField(max_length=64, blank=True, null=True)
    verification_token_expires = models.DateTimeField(blank=True, null=True)
    last_login_ip = models.CharField(max_length=39, blank=True, null=True)
    failed_login_attempts = models.PositiveIntegerField()
    ga_secret_key = models.CharField(max_length=32, blank=True, null=True)
    has_2fa = models.BooleanField()
    two_factor_method = models.CharField(max_length=20, blank=True, null=True)
    two_factor_secret = models.CharField(max_length=100, blank=True, null=True)
    two_factor_password = models.CharField(max_length=128, blank=True, null=True)
    google_auth_secret = models.CharField(max_length=32, blank=True, null=True)
    require_2fa_purchase = models.BooleanField()
    require_2fa_deposit = models.BooleanField()
    require_2fa_password = models.BooleanField()
    require_2fa_profile = models.BooleanField()
    tcoin = models.IntegerField()
    account_label = models.ForeignKey(AccountsAccounttype, models.DO_NOTHING, blank=True, null=True)
    account_type = models.CharField(max_length=20)
    bio = models.TextField(blank=True, null=True)
    is_verified = models.BooleanField()
    bank_account = models.CharField(max_length=50, blank=True, null=True)
    bank_branch = models.CharField(max_length=100, blank=True, null=True)
    bank_name = models.CharField(max_length=100, blank=True, null=True)
    user_notes = models.TextField(blank=True, null=True)
    phone_number = models.CharField(max_length=15)
    last_activity = models.DateTimeField(blank=True, null=True)
class AccountsCustomuserGroups(models.Model):
    customuser = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    group = models.ForeignKey('AuthGroup', models.DO_NOTHING)
        unique_together = (('customuser', 'group'),)
class AccountsCustomuserUserPermissions(models.Model):
    customuser = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)
        unique_together = (('customuser', 'permission'),)
class AccountsDailycheckin(models.Model):
    date = models.DateField()
    tcoin_earned = models.IntegerField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
        unique_together = (('user', 'date'),)
class AccountsDeposit(models.Model):
    payment_method = models.CharField(max_length=20)
    status = models.CharField(max_length=20)
    transaction_id = models.CharField(unique=True, max_length=100)
    created_at = models.DateTimeField()
    completed_at = models.DateTimeField(blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class AccountsEmailchangeotp(models.Model):
    otp_hash = models.CharField(max_length=128)
    created_at = models.DateTimeField()
    expires_at = models.DateTimeField()
    attempts = models.IntegerField()
    is_verified = models.BooleanField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class AccountsLoginhistory(models.Model):
    ip_address = models.CharField(max_length=39)
    device_info = models.CharField(max_length=255)
    browser_info = models.CharField(max_length=255)
    location = models.CharField(max_length=255, blank=True, null=True)
    login_time = models.DateTimeField()
    is_current = models.BooleanField()
    status = models.CharField(max_length=20)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class AccountsOrder(models.Model):
    code = models.CharField(max_length=50)
    product_name = models.CharField(max_length=255)
    date = models.DateTimeField()
    status = models.CharField(max_length=20)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class AccountsPremiumsubscription(models.Model):
    product_name = models.CharField(max_length=100)
    duration = models.CharField(max_length=50)
    start_date = models.DateField()
    expiry_date = models.DateField()
    status = models.CharField(max_length=30)
    reminder_sent = models.BooleanField()
    reminder_date = models.DateField(blank=True, null=True)
    order = models.ForeignKey('StoreOrder', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class AccountsTcoin(models.Model):
    last_updated = models.DateTimeField()
    user = models.OneToOneField(AccountsCustomuser, models.DO_NOTHING)
class AccountsTcoinhistory(models.Model):
    amount = models.IntegerField()
    created_at = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    balance_after = models.IntegerField()
    transaction_type = models.CharField(max_length=20)
    description = models.CharField(max_length=255)
class AccountsTransaction(models.Model):
    code = models.CharField(max_length=50)
    date = models.DateTimeField()
    method = models.CharField(max_length=50)
    status = models.CharField(max_length=20)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class AccountsUseractivity(models.Model):
    action = models.CharField(max_length=255)
    action_type = models.CharField(max_length=20)
    severity = models.CharField(max_length=20)
    details = models.TextField()
    metadata = models.JSONField()
    timestamp = models.DateTimeField()
    ip_address = models.CharField(max_length=39, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class AccountsUsernote(models.Model):
    content = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    created_by = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, related_name='accountsusernote_user_set')
class AdminInterfaceTheme(models.Model):
    name = models.CharField(unique=True, max_length=50)
    active = models.BooleanField()
    title = models.CharField(max_length=50)
    title_visible = models.BooleanField()
    logo = models.CharField(max_length=100)
    logo_visible = models.BooleanField()
    css_header_background_color = models.CharField(max_length=10)
    css_header_text_color = models.CharField(max_length=10)
    css_header_link_color = models.CharField(max_length=10)
    css_header_link_hover_color = models.CharField(max_length=10)
    css_module_background_color = models.CharField(max_length=10)
    css_module_text_color = models.CharField(max_length=10)
    css_module_link_color = models.CharField(max_length=10)
    css_module_link_hover_color = models.CharField(max_length=10)
    css_module_rounded_corners = models.BooleanField()
    css_generic_link_color = models.CharField(max_length=10)
    css_generic_link_hover_color = models.CharField(max_length=10)
    css_save_button_background_color = models.CharField(max_length=10)
    css_save_button_background_hover_color = models.CharField(max_length=10)
    css_save_button_text_color = models.CharField(max_length=10)
    css_delete_button_background_color = models.CharField(max_length=10)
    css_delete_button_background_hover_color = models.CharField(max_length=10)
    css_delete_button_text_color = models.CharField(max_length=10)
    list_filter_dropdown = models.BooleanField()
    related_modal_active = models.BooleanField()
    related_modal_background_color = models.CharField(max_length=10)
    related_modal_rounded_corners = models.BooleanField()
    logo_color = models.CharField(max_length=10)
    title_color = models.CharField(max_length=10)
    recent_actions_visible = models.BooleanField()
    favicon = models.CharField(max_length=100)
    related_modal_background_opacity = models.CharField(max_length=5)
    env_name = models.CharField(max_length=50)
    env_color = models.CharField(max_length=10)
    env_visible_in_header = models.BooleanField()
    env_visible_in_favicon = models.BooleanField()
    related_modal_close_button_visible = models.BooleanField()
    language_chooser_active = models.BooleanField()
    language_chooser_display = models.CharField(max_length=10)
    list_filter_sticky = models.BooleanField()
    form_pagination_sticky = models.BooleanField()
    form_submit_sticky = models.BooleanField()
    css_module_background_selected_color = models.CharField(max_length=10)
    css_module_link_selected_color = models.CharField(max_length=10)
    logo_max_height = models.PositiveSmallIntegerField()
    logo_max_width = models.PositiveSmallIntegerField()
    foldable_apps = models.BooleanField()
    language_chooser_control = models.CharField(max_length=20)
    list_filter_highlight = models.BooleanField()
    list_filter_removal_links = models.BooleanField()
    show_fieldsets_as_tabs = models.BooleanField()
    show_inlines_as_tabs = models.BooleanField()
    css_generic_link_active_color = models.CharField(max_length=10)
    collapsible_stacked_inlines = models.BooleanField()
    collapsible_stacked_inlines_collapsed = models.BooleanField()
    collapsible_tabular_inlines = models.BooleanField()
    collapsible_tabular_inlines_collapsed = models.BooleanField()
class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)
class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)
        unique_together = (('group', 'permission'),)
class AuthPermission(models.Model):
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)
        unique_together = (('content_type', 'codename'),)
class BlogCategory(models.Model):
    name = models.CharField(max_length=100)
    slug = models.CharField(unique=True, max_length=100)
    description = models.TextField()
class BlogPost(models.Model):
    title = models.CharField(max_length=200)
    slug = models.CharField(unique=True, max_length=200)
    content = models.TextField()
    excerpt = models.TextField()
    featured_image = models.CharField(max_length=100, blank=True, null=True)
    is_featured = models.BooleanField()
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    published_at = models.DateTimeField()
    author = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    category = models.ForeignKey(BlogCategory, models.DO_NOTHING)
class BlogPostview(models.Model):
    ip_address = models.CharField(max_length=39)
    viewed_at = models.DateTimeField()
    post = models.ForeignKey(BlogPost, models.DO_NOTHING)
class DashboardAllowedcategory(models.Model):
    category = models.ForeignKey('StoreCategory', models.DO_NOTHING)
    config = models.ForeignKey('DashboardChatbotconfig', models.DO_NOTHING)
        unique_together = (('config', 'category'),)
class DashboardApiconfig(models.Model):
    api_type = models.CharField(max_length=20)
    api_key = models.CharField(max_length=255)
    temperature = models.FloatField()
    max_tokens = models.IntegerField()
    endpoint = models.CharField(max_length=255, blank=True, null=True)
    active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    is_active = models.BooleanField()
    model = models.CharField(max_length=100)
class DashboardApiintegration(models.Model):
    name = models.CharField(max_length=100)
    api_type = models.CharField(max_length=20)
    api_url = models.CharField(max_length=200)
    api_key = models.CharField(max_length=255)
    api_version = models.CharField(max_length=50, blank=True, null=True)
    timeout = models.IntegerField()
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    active = models.BooleanField()
class DashboardApikey(models.Model):
    key = models.CharField(unique=True, max_length=64)
    name = models.CharField(max_length=100)
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    last_used = models.DateTimeField(blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class DashboardApilog(models.Model):
    endpoint = models.CharField(max_length=200)
    method = models.CharField(max_length=10)
    request_data = models.JSONField(blank=True, null=True)
    response_data = models.JSONField(blank=True, null=True)
    status_code = models.IntegerField()
    ip_address = models.CharField(max_length=39, blank=True, null=True)
    timestamp = models.DateTimeField()
    api_key = models.ForeignKey(DashboardApikey, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
class DashboardBanner(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField(blank=True, null=True)
    image = models.CharField(max_length=100)
    url = models.CharField(max_length=200, blank=True, null=True)
    position = models.CharField(max_length=20)
    end_date = models.DateTimeField(blank=True, null=True)
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    order = models.IntegerField()
    start_date = models.DateTimeField()
class DashboardBrand(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    logo = models.CharField(max_length=100, blank=True, null=True)
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
class DashboardCalendarevent(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    start_time = models.DateTimeField()
    end_time = models.DateTimeField()
    is_all_day = models.BooleanField()
    event_type = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class DashboardCampaign(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    code = models.CharField(unique=True, max_length=50)
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
    is_active = models.BooleanField()
    click_count = models.IntegerField()
    conversion_count = models.IntegerField()
    created_at = models.DateTimeField()
class DashboardCategory(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    image = models.CharField(max_length=100, blank=True, null=True)
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
class DashboardChatbotconfig(models.Model):
    name = models.CharField(max_length=50)
    is_active = models.BooleanField()
    base_prompt = models.TextField(blank=True, null=True)
    rejection_message = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    avatar = models.CharField(max_length=100, blank=True, null=True)
    chatbot_name = models.CharField(max_length=50, blank=True, null=True)
    system_prompt = models.TextField(blank=True, null=True)
    active = models.BooleanField()
    theme_color = models.CharField(max_length=20)
class DashboardChatbotconversation(models.Model):
    conversation_data = models.JSONField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    session_id = models.CharField(unique=True, max_length=100)
class DashboardChatbotintent(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    keywords = models.JSONField()
    created_at = models.DateTimeField()
class DashboardChatfeedback(models.Model):
    session_id = models.CharField(max_length=100)
    feedback_text = models.TextField()
    rating = models.PositiveSmallIntegerField()
    created_at = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
class DashboardChatlog(models.Model):
    session_id = models.CharField(max_length=100)
    user_query = models.TextField()
    response = models.TextField()
    status = models.CharField(max_length=20)
    filter_reason = models.TextField(blank=True, null=True)
    api_response_time = models.FloatField()
    satisfaction_rating = models.PositiveSmallIntegerField(blank=True, null=True)
    created_at = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    metadata = models.JSONField(blank=True, null=True)
    full_prompt = models.TextField(blank=True, null=True)
class DashboardChatmessage(models.Model):
    message_type = models.CharField(max_length=10)
    content = models.TextField()
    timestamp = models.DateTimeField()
    intent = models.ForeignKey(DashboardChatbotintent, models.DO_NOTHING, blank=True, null=True)
    session = models.ForeignKey('DashboardChatsession', models.DO_NOTHING)
class DashboardChatsession(models.Model):
    session_id = models.CharField(unique=True, max_length=100)
    started_at = models.DateTimeField()
    ended_at = models.DateTimeField(blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
class DashboardContentblock(models.Model):
    block_type = models.CharField(max_length=10)
    title = models.CharField(max_length=200)
    content = models.TextField()
    order = models.IntegerField()
    page = models.ForeignKey('DashboardContentpage', models.DO_NOTHING)
class DashboardContentpage(models.Model):
    title = models.CharField(max_length=200)
    slug = models.CharField(unique=True, max_length=50)
    meta_description = models.CharField(max_length=160)
    published = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
class DashboardConversation(models.Model):
    last_message_time = models.DateTimeField()
    admin = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, related_name='dashboardconversation_user_set')
        unique_together = (('admin', 'user'),)
class DashboardDailyanalytics(models.Model):
    date = models.DateField(unique=True)
    unique_visitors = models.IntegerField()
    page_views = models.IntegerField()
    new_users = models.IntegerField()
    total_orders = models.IntegerField()
class DashboardDiscount(models.Model):
    code = models.CharField(unique=True, max_length=20)
    discount_type = models.CharField(max_length=20)
    description = models.TextField()
    usage_limit = models.IntegerField(blank=True, null=True)
    used_count = models.IntegerField()
    valid_from = models.DateTimeField()
    valid_to = models.DateTimeField()
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
class DashboardDiscountbackup(models.Model):
    name = models.CharField(max_length=100)
    backup_data = models.TextField()
    include_usage = models.BooleanField()
    created_at = models.DateTimeField()
    file_path = models.CharField(max_length=255, blank=True, null=True)
    created_by = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
class DashboardDiscounthistory(models.Model):
    created_at = models.DateTimeField()
    discount = models.ForeignKey('StoreDiscount', models.DO_NOTHING, blank=True, null=True)
    action_type = models.CharField(max_length=20)
    changes_json = models.TextField(blank=True, null=True)
    discount_code = models.CharField(max_length=50)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
class DashboardDiscountusage(models.Model):
    used_at = models.DateTimeField()
    order = models.ForeignKey('StoreOrder', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    discount = models.ForeignKey('StoreDiscount', models.DO_NOTHING)
class DashboardEmaillog(models.Model):
    recipient = models.CharField(max_length=254)
    subject = models.CharField(max_length=200)
    body = models.TextField()
    sent_at = models.DateTimeField()
    status = models.CharField(max_length=20)
    template = models.ForeignKey('DashboardEmailtemplate', models.DO_NOTHING, blank=True, null=True)
class DashboardEmailtemplate(models.Model):
    name = models.CharField(unique=True, max_length=100)
    subject = models.CharField(max_length=200)
    content = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
class DashboardEvent(models.Model):
    title = models.CharField(max_length=255)
    event_type = models.CharField(max_length=50)
    start_time = models.DateTimeField()
    end_time = models.DateTimeField()
    description = models.TextField(blank=True, null=True)
    color = models.CharField(max_length=7)
    all_day = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
class DashboardForbiddenkeyword(models.Model):
    keyword = models.CharField(max_length=100)
    config = models.ForeignKey(DashboardChatbotconfig, models.DO_NOTHING)
class DashboardMessage(models.Model):
    message_type = models.CharField(max_length=10)
    content = models.TextField()
    order_data = models.JSONField(blank=True, null=True)
    is_read = models.BooleanField()
    sent_at = models.DateTimeField()
    read_at = models.DateTimeField(blank=True, null=True)
    conversation = models.ForeignKey(DashboardConversation, models.DO_NOTHING)
    receiver = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    sender = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, related_name='dashboardmessage_sender_set')
class DashboardNotification(models.Model):
    title = models.CharField(max_length=100)
    message = models.TextField()
    is_read = models.BooleanField()
    created_at = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class DashboardPageanalytics(models.Model):
    path = models.CharField(max_length=255)
    date = models.DateField()
    views = models.IntegerField()
    unique_visitors = models.IntegerField()
    average_time = models.FloatField()
        unique_together = (('path', 'date'),)
class DashboardPageview(models.Model):
    path = models.CharField(max_length=255)
    session_id = models.CharField(max_length=100)
    ip_address = models.CharField(max_length=39, blank=True, null=True)
    user_agent = models.TextField()
    referrer = models.CharField(max_length=200)
    timestamp = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
class DashboardProduct(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    image = models.CharField(max_length=100, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    is_active = models.BooleanField()
    cross_sale_discount = models.IntegerField()
    duration = models.CharField(max_length=20)
    features = models.JSONField()
    is_cross_sale = models.BooleanField()
    is_featured = models.BooleanField()
    product_code = models.CharField(max_length=50, blank=True, null=True)
    requires_account_password = models.BooleanField()
    requires_email = models.BooleanField()
    stock = models.PositiveIntegerField()
    brand = models.ForeignKey(DashboardBrand, models.DO_NOTHING, blank=True, null=True)
    category = models.ForeignKey(DashboardCategory, models.DO_NOTHING, blank=True, null=True)
    label = models.ForeignKey('DashboardProductlabel', models.DO_NOTHING, blank=True, null=True)
class DashboardProductCrossSaleProducts(models.Model):
    from_product = models.ForeignKey(DashboardProduct, models.DO_NOTHING)
    to_product = models.ForeignKey(DashboardProduct, models.DO_NOTHING, related_name='dashboardproductcrosssaleproducts_to_product_set')
        unique_together = (('from_product', 'to_product'),)
class DashboardProductchangelog(models.Model):
    action = models.CharField(max_length=20)
    description = models.TextField()
    created_at = models.DateTimeField()
    product = models.ForeignKey(DashboardProduct, models.DO_NOTHING)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
class DashboardProductimage(models.Model):
    image = models.CharField(max_length=100)
    is_primary = models.BooleanField()
    created_at = models.DateTimeField()
    product = models.ForeignKey(DashboardProduct, models.DO_NOTHING)
class DashboardProductlabel(models.Model):
    name = models.CharField(max_length=50)
    color = models.CharField(max_length=20)
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
class DashboardReferralcode(models.Model):
    code = models.CharField(unique=True, max_length=20)
    used_count = models.IntegerField()
    created_at = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    program = models.ForeignKey('DashboardReferralprogram', models.DO_NOTHING)
class DashboardReferralprogram(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    reward_type = models.CharField(max_length=20)
    is_active = models.BooleanField()
    start_date = models.DateTimeField()
    end_date = models.DateTimeField(blank=True, null=True)
class DashboardReferraltransaction(models.Model):
    created_at = models.DateTimeField()
    code = models.ForeignKey(DashboardReferralcode, models.DO_NOTHING)
    referred = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    referrer = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, related_name='dashboardreferraltransaction_referrer_set')
class DashboardReferreranalytics(models.Model):
    referrer_domain = models.CharField(max_length=255)
    date = models.DateField()
    visits = models.IntegerField()
        unique_together = (('referrer_domain', 'date'),)
class DashboardSource(models.Model):
    name = models.CharField(max_length=255)
    url = models.CharField(max_length=200)
    platform = models.CharField(max_length=20)
    product_type = models.CharField(max_length=100)
    availability_rate = models.IntegerField()
    priority = models.IntegerField()
    notes = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    is_active = models.BooleanField()
class DashboardSourcehistory(models.Model):
    log_type = models.CharField(max_length=20)
    has_stock = models.BooleanField()
    quantity = models.PositiveIntegerField()
    price = models.PositiveIntegerField()
    processing_time = models.PositiveIntegerField(blank=True, null=True)
    notes = models.TextField()
    created_at = models.DateTimeField()
    created_by = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    source = models.ForeignKey(DashboardSource, models.DO_NOTHING)
    source_product = models.ForeignKey('DashboardSourceproduct', models.DO_NOTHING, blank=True, null=True)
    account_password = models.CharField(max_length=255)
    account_type = models.CharField(max_length=20)
    account_username = models.CharField(max_length=255)
    products = models.JSONField()
class DashboardSourcelog(models.Model):
    log_type = models.CharField(max_length=20)
    has_stock = models.BooleanField()
    processing_time = models.IntegerField(blank=True, null=True)
    notes = models.TextField()
    created_at = models.DateTimeField()
    created_by = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    source = models.ForeignKey(DashboardSource, models.DO_NOTHING)
    source_product = models.ForeignKey('DashboardSourceproduct', models.DO_NOTHING, blank=True, null=True)
class DashboardSourceproduct(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField()
    product_url = models.CharField(max_length=200)
    error_rate = models.FloatField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    product = models.ForeignKey('StoreProduct', models.DO_NOTHING, blank=True, null=True)
    source = models.ForeignKey(DashboardSource, models.DO_NOTHING)
        unique_together = (('source', 'product'),)
class DashboardSubscriptionplan(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    duration_days = models.IntegerField()
    features = models.JSONField()
    max_warranty_count = models.IntegerField()
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
class DashboardSubscriptiontransaction(models.Model):
    transaction_id = models.CharField(unique=True, max_length=100)
    payment_method = models.CharField(max_length=20)
    status = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    completed_at = models.DateTimeField(blank=True, null=True)
    subscription = models.ForeignKey('DashboardUsersubscription', models.DO_NOTHING)
class DashboardSupportticket(models.Model):
    subject = models.CharField(max_length=200)
    message = models.TextField()
    status = models.CharField(max_length=20)
    priority = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class DashboardSystemnotification(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField()
    severity = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    is_active = models.BooleanField()
class DashboardTicketreply(models.Model):
    message = models.TextField()
    created_at = models.DateTimeField()
    ticket = models.ForeignKey(DashboardSupportticket, models.DO_NOTHING)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class DashboardUseractivitylog(models.Model):
    action_type = models.CharField(max_length=20)
    description = models.TextField()
    old_data = models.JSONField(blank=True, null=True)
    created_at = models.DateTimeField()
    can_rollback = models.BooleanField()
    admin = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, related_name='dashboarduseractivitylog_user_set')
    metadata = models.JSONField(blank=True, null=True)
class DashboardUserdiscount(models.Model):
    assigned_at = models.DateTimeField()
    is_used = models.BooleanField()
    used_at = models.DateTimeField(blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    discount = models.ForeignKey('StoreDiscount', models.DO_NOTHING)
class DashboardUsernotification(models.Model):
    is_read = models.BooleanField()
    created_at = models.DateTimeField()
    message = models.ForeignKey(DashboardMessage, models.DO_NOTHING)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class DashboardUsersubscription(models.Model):
    status = models.CharField(max_length=20)
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
    warranty_count = models.IntegerField()
    auto_renew = models.BooleanField()
    created_at = models.DateTimeField()
    plan = models.ForeignKey(DashboardSubscriptionplan, models.DO_NOTHING)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class DashboardVisitorsession(models.Model):
    session_id = models.CharField(unique=True, max_length=100)
    ip_address = models.CharField(max_length=45)
    user_agent = models.TextField()
    device_type = models.CharField(max_length=20)
    referrer = models.CharField(max_length=200, blank=True, null=True)
    landing_page = models.CharField(max_length=255)
    page_views = models.IntegerField()
    duration = models.IntegerField()
    is_bounce = models.BooleanField()
    created_at = models.DateTimeField()
    last_visit = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
class DashboardWarrantyhistory(models.Model):
    action = models.CharField(max_length=100)
    notes = models.TextField()
    created_at = models.DateTimeField()
    performed_by = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    ticket = models.ForeignKey('DashboardWarrantyticket', models.DO_NOTHING)
class DashboardWarrantyreason(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
class DashboardWarrantyrequest(models.Model):
    custom_reason = models.TextField(blank=True, null=True)
    account_username = models.CharField(max_length=255)
    account_password = models.CharField(max_length=255)
    account_type = models.CharField(max_length=255)
    error_screenshot = models.CharField(max_length=100)
    platform = models.CharField(max_length=20)
    notes = models.TextField(blank=True, null=True)
    status = models.CharField(max_length=20)
    is_self_registered = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    order = models.ForeignKey('StoreOrder', models.DO_NOTHING, blank=True, null=True)
    reason = models.ForeignKey(DashboardWarrantyreason, models.DO_NOTHING, blank=True, null=True)
    source = models.ForeignKey(DashboardSource, models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class DashboardWarrantyrequesthistory(models.Model):
    status = models.CharField(max_length=20)
    notes = models.TextField(blank=True, null=True)
    admin_notes = models.TextField(blank=True, null=True)
    warranty_types = models.JSONField(blank=True, null=True)
    added_days = models.IntegerField()
    new_account_info = models.JSONField(blank=True, null=True)
    created_at = models.DateTimeField()
    admin = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    warranty_request = models.ForeignKey(DashboardWarrantyrequest, models.DO_NOTHING)
class DashboardWarrantyservice(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
class DashboardWarrantyticket(models.Model):
    issue_description = models.TextField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    status = models.CharField(max_length=50)
    resolution = models.TextField(blank=True, null=True)
    assigned_to = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    customer = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, related_name='dashboardwarrantyticket_customer_set')
    order = models.ForeignKey('StoreOrder', models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('StoreProduct', models.DO_NOTHING, blank=True, null=True)
class DashboardWebhook(models.Model):
    url = models.CharField(max_length=200)
    events = models.JSONField()
    is_active = models.BooleanField()
    secret = models.CharField(max_length=64)
    created_at = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class DashboardWebhookdelivery(models.Model):
    event = models.CharField(max_length=100)
    payload = models.JSONField()
    response = models.TextField(blank=True, null=True)
    status_code = models.IntegerField(blank=True, null=True)
    delivered_at = models.DateTimeField()
    webhook = models.ForeignKey(DashboardWebhook, models.DO_NOTHING)
class DjangoAdminLog(models.Model):
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    action_time = models.DateTimeField()
class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)
        unique_together = (('app_label', 'model'),)
class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()
class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()
class InstallmentTransactions(models.Model):
    order_reference = models.CharField(unique=True, max_length=100)
    order_info = models.CharField(max_length=255)
    number_of_installments = models.IntegerField()
    frequency = models.CharField(max_length=20)
    issuer_code = models.CharField(max_length=20)
    scheme = models.CharField(max_length=20)
    status = models.CharField(max_length=20)
    vnpay_transaction_id = models.CharField(max_length=100, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class PaymentTransaction(models.Model):
    payment_method = models.CharField(max_length=20)
    transaction_id = models.CharField(unique=True, max_length=100)
    status = models.CharField(max_length=20)
    description = models.CharField(max_length=255, blank=True, null=True)
    transaction_type = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    order = models.ForeignKey('StoreOrder', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class SocialAuthAssociation(models.Model):
    server_url = models.CharField(max_length=255)
    handle = models.CharField(max_length=255)
    secret = models.CharField(max_length=255)
    issued = models.IntegerField()
    lifetime = models.IntegerField()
    assoc_type = models.CharField(max_length=64)
        unique_together = (('server_url', 'handle'),)
class SocialAuthCode(models.Model):
    email = models.CharField(max_length=254)
    code = models.CharField(max_length=32)
    verified = models.BooleanField()
    timestamp = models.DateTimeField()
        unique_together = (('email', 'code'),)
class SocialAuthNonce(models.Model):
    server_url = models.CharField(max_length=255)
    timestamp = models.IntegerField()
    salt = models.CharField(max_length=65)
        unique_together = (('server_url', 'timestamp', 'salt'),)
class SocialAuthPartial(models.Model):
    token = models.CharField(max_length=32)
    next_step = models.PositiveSmallIntegerField()
    backend = models.CharField(max_length=32)
    timestamp = models.DateTimeField()
    data = models.JSONField()
class SocialAuthUsersocialauth(models.Model):
    provider = models.CharField(max_length=32)
    uid = models.CharField(max_length=255)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    created = models.DateTimeField()
    modified = models.DateTimeField()
    extra_data = models.JSONField()
        unique_together = (('provider', 'uid'),)
class StoreBanner(models.Model):
    title = models.CharField(max_length=200)
    image = models.CharField(max_length=100)
    link = models.CharField(max_length=200)
    location = models.CharField(max_length=20)
    order = models.IntegerField()
    is_active = models.BooleanField()
class StoreBlogpost(models.Model):
    title = models.CharField(max_length=200)
    slug = models.CharField(unique=True, max_length=200)
    content = models.TextField()
    image = models.CharField(max_length=100, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    is_active = models.BooleanField()
class StoreBlogpostProducts(models.Model):
    blogpost = models.ForeignKey(StoreBlogpost, models.DO_NOTHING)
    product = models.ForeignKey('StoreProduct', models.DO_NOTHING)
        unique_together = (('blogpost', 'product'),)
class StoreBrand(models.Model):
    name = models.CharField(max_length=255)
    slug = models.CharField(unique=True, max_length=255)
    description = models.TextField()
    logo = models.CharField(max_length=100, blank=True, null=True)
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
class StoreCartitem(models.Model):
    session_key = models.CharField(max_length=40, blank=True, null=True)
    quantity = models.IntegerField()
    duration = models.IntegerField(blank=True, null=True)
    upgrade_email = models.CharField(max_length=254, blank=True, null=True)
    account_username = models.CharField(max_length=255, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
    product = models.ForeignKey('StoreProduct', models.DO_NOTHING)
    variant = models.ForeignKey('StoreProductvariant', models.DO_NOTHING, blank=True, null=True)
        unique_together = (('user', 'product', 'variant', 'duration', 'upgrade_email'), ('session_key', 'product', 'variant', 'duration', 'upgrade_email'),)
class StoreCategory(models.Model):
    name = models.CharField(max_length=100)
    slug = models.CharField(unique=True, max_length=100)
    description = models.TextField()
    image = models.CharField(max_length=100, blank=True, null=True)
    parent = models.ForeignKey('self', models.DO_NOTHING, blank=True, null=True)
class StoreDiscount(models.Model):
    code = models.CharField(unique=True, max_length=50)
    description = models.TextField(blank=True, null=True)
    discount_type = models.CharField(max_length=10)
    max_uses = models.IntegerField()
    used_count = models.IntegerField()
    valid_from = models.DateTimeField()
    valid_to = models.DateTimeField()
    is_active = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    uses_per_customer = models.IntegerField()
class StoreDiscountAllowedUsers(models.Model):
    discount = models.ForeignKey(StoreDiscount, models.DO_NOTHING)
    customuser = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
        unique_together = (('discount', 'customuser'),)
class StoreDiscountCategories(models.Model):
    discount = models.ForeignKey(StoreDiscount, models.DO_NOTHING)
    category = models.ForeignKey(StoreCategory, models.DO_NOTHING)
        unique_together = (('discount', 'category'),)
class StoreDiscountProducts(models.Model):
    discount = models.ForeignKey(StoreDiscount, models.DO_NOTHING)
    product = models.ForeignKey('StoreProduct', models.DO_NOTHING)
        unique_together = (('discount', 'product'),)
class StoreDiscountusage(models.Model):
    used_at = models.DateTimeField()
    discount = models.ForeignKey(StoreDiscount, models.DO_NOTHING)
    order = models.ForeignKey('StoreOrder', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class StoreOrder(models.Model):
    status = models.CharField(max_length=20)
    payment_method = models.CharField(max_length=20, blank=True, null=True)
    payment_status = models.CharField(max_length=20, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
    order_number = models.CharField(unique=True, max_length=50, blank=True, null=True)
class StoreOrderitem(models.Model):
    product_name = models.CharField(max_length=255)
    variant_name = models.CharField(max_length=255, blank=True, null=True)
    quantity = models.IntegerField()
    duration = models.IntegerField(blank=True, null=True)
    upgrade_email = models.CharField(max_length=254, blank=True, null=True)
    account_username = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    order = models.ForeignKey(StoreOrder, models.DO_NOTHING)
    product = models.ForeignKey('StoreProduct', models.DO_NOTHING)
class StoreProduct(models.Model):
    name = models.CharField(max_length=255)
    duration = models.CharField(max_length=20)
    description = models.TextField()
    stock = models.PositiveIntegerField()
    features = models.JSONField()
    is_featured = models.BooleanField()
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    requires_email = models.BooleanField()
    requires_account_password = models.BooleanField()
    is_cross_sale = models.BooleanField()
    cross_sale_discount = models.IntegerField()
    is_active = models.BooleanField()
    product_code = models.CharField(max_length=50, blank=True, null=True)
    brand = models.ForeignKey(StoreBrand, models.DO_NOTHING, blank=True, null=True)
    category = models.ForeignKey(StoreCategory, models.DO_NOTHING, blank=True, null=True)
    label = models.ForeignKey('StoreProductlabel', models.DO_NOTHING, blank=True, null=True)
class StoreProductCrossSaleProducts(models.Model):
    from_product = models.ForeignKey(StoreProduct, models.DO_NOTHING)
    to_product = models.ForeignKey(StoreProduct, models.DO_NOTHING, related_name='storeproductcrosssaleproducts_to_product_set')
        unique_together = (('from_product', 'to_product'),)
class StoreProductimage(models.Model):
    image = models.CharField(max_length=100)
    is_primary = models.BooleanField()
    product = models.ForeignKey(StoreProduct, models.DO_NOTHING)
class StoreProductlabel(models.Model):
    name = models.CharField(max_length=100)
    color = models.CharField(max_length=7)
class StoreProductvariant(models.Model):
    name = models.CharField(max_length=100)
    stock = models.PositiveIntegerField()
    is_active = models.BooleanField()
    order = models.IntegerField()
    product = models.ForeignKey(StoreProduct, models.DO_NOTHING)
class StorePurchasedaccount(models.Model):
    account_type = models.CharField(max_length=50)
    expiry_date = models.DateField()
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
class StoreSearchhistory(models.Model):
    keyword = models.CharField(max_length=255)
    created_at = models.DateTimeField()
    ip_address = models.CharField(max_length=39, blank=True, null=True)
    user_agent = models.TextField(blank=True, null=True)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING, blank=True, null=True)
class StoreVariantoption(models.Model):
    duration = models.IntegerField()
    stock = models.IntegerField()
    is_active = models.BooleanField()
    variant = models.ForeignKey(StoreProductvariant, models.DO_NOTHING)
class StoreWishlist(models.Model):
    created_at = models.DateTimeField()
    product = models.ForeignKey(StoreProduct, models.DO_NOTHING)
    user = models.ForeignKey(AccountsCustomuser, models.DO_NOTHING)
        unique_together = (('user', 'product'),)
class TransactionItems(models.Model):
    product_name = models.CharField(max_length=255)
    variant_name = models.CharField(max_length=255, blank=True, null=True)
    quantity = models.IntegerField()
    duration = models.IntegerField(blank=True, null=True)
    upgrade_email = models.CharField(max_length=254, blank=True, null=True)
    account_username = models.CharField(max_length=255, blank=True, null=True)
    transaction = models.ForeignKey(PaymentTransaction, models.DO_NOTHING)
